<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" style="background: #888;">
	<!--
		This is a substantially less basic program that lets you move the motors around.
		It will get the current motor position from the server (if it exists),
		then send signals to move the motor whenever you click in a new position.
	-->
	<style>
text {
	font-family: sans-serif;
	user-select: none;
	font-size: 2px;
}
.button rect {
	fill: black;
	rx: 0.5px;
}
.button text {
	fill: white;
	transform: translateY(1.75px);
}
.button:hover rect {
	fill: white;
	stroke: black;
	stroke-width: 0.1px;
}
.button:hover text {
	fill: black;
}
	</style>
	<rect x="0" y="0" width="20" height="20" fill="white" />
	<g>
		<rect x="0" y="0" width="20" height="2" fill="black" />
		<path d="M 1 0.2 L 1.6 0.9 L 1.6 1.8 L 0.4 1.8 L 0.4 0.9 Z" fill="black" stroke-width="0.2" stroke="white" onclick="location.replace('.')" />
		<text x="2" y="2" fill="white">Motor Control</text>
	</g>
	<g id="canvas">
		<rect x="2" y="3" width="15" height="15" fill="white" stroke="black" stroke-width="0.1" onclick="clicked(event)" />
	</g>
	<g onclick="resetPos()">
		<rect x="16" y="19" width="3.6" height="0.6" fill="black" />
		<text x="19.4" y="19.5" style="fill: white; font-size: 0.5px;" text-anchor="end">Reset Position</text>
	</g>
	<g onclick="setloc(200, 200)">
		<rect x="13" y="19" width="2.6" height="0.6" fill="black" />
		<text x="15.5" y="19.5" style="fill: white; font-size: 0.5px;" text-anchor="end">Set Center</text>
	</g>
	<script><![CDATA[
var ns = "http://www.w3.org/2000/svg";
function clicked(event) {
	var box = event.currentTarget.getBoundingClientRect()
	var x = (event.clientX - box.left) / box.width
	var y = (event.clientY - box.top) / box.height
	setloc(x * 400, y * 400)
}
function setCirclePos(x, y) {
	loc[0].setAttribute("cx", ((x / 400) * 15) + 2)
	loc[0].setAttribute("cy", ((y / 400) * 15) + 3)
}
var xy = {{MOTORLOC}}
var loc = null;
(() => {
	if (xy != null) {
		var x = xy[0]
		var y = xy[1]
		loc = [document.createElementNS(ns, "circle"), x, y]
		setCirclePos(x, y)
		loc[0].setAttribute("r", "0.3")
		loc[0].setAttribute("fill", "black")
		document.querySelector("#canvas").appendChild(loc[0])
	}
})();
function setloc(x, y) {
	if (loc == null) {
		loc = [document.createElementNS(ns, "circle"), x, y]
		setCirclePos(x, y)
		loc[0].setAttribute("r", "0.3")
		loc[0].setAttribute("fill", "black")
		document.querySelector("#canvas").appendChild(loc[0])
		var h = new XMLHttpRequest()
		h.open("POST", "/guess/pos")
		h.send(x + "\n" + y)
	} else {
		var h = new XMLHttpRequest()
		h.open("POST", "/move_motor")
		h.send("2" + Math.round((loc[1] - x) / 2))
		h = new XMLHttpRequest()
		h.open("POST", "/move_motor")
		h.send("1" + Math.round((loc[2] - y) / 2))
		setTimeout(() => {
			var h = new XMLHttpRequest()
			h.open("POST", "/move_motor")
			h.send("10")
			h = new XMLHttpRequest()
			h.open("POST", "/move_motor")
			h.send("20")
		}, 2000)
		// Update local pos
		loc[1] = x
		loc[2] = y
		setCirclePos(x, y)
	}
}
function resetPos() {
	var h = new XMLHttpRequest()
	h.open("POST", "/guess/remove")
	h.addEventListener("loadend", () => location.reload())
	h.send()
}
	]]></script>
</svg>