<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" style="background: #888;">
	<!--
		This file lets you create a file with a simpe back-and-forth motion.
		I hope you appreciate my sliders, because they are amazing.
	-->
	<style>
text {
	font-family: sans-serif;
	user-select: none;
	font-size: 2px;
}
.button rect {
	fill: black;
	rx: 0.5px;
}
.button text {
	fill: white;
	transform: translateY(1.75px);
}
.button:hover rect {
	fill: white;
	stroke: black;
	stroke-width: 0.1px;
}
.button:hover text {
	fill: black;
}
	</style>
	<rect x="0" y="0" width="20" height="20" fill="white" />
	<g>
		<rect x="0" y="0" width="20" height="2" fill="black" />
		<path d="M 1 0.2 L 1.6 0.9 L 1.6 1.8 L 0.4 1.8 L 0.4 0.9 Z" fill="black" stroke-width="0.2" stroke="white" onclick="location.replace('.')" />
		<text x="2" y="2" fill="white">Create File</text>
	</g>
	<g class="button" onclick="submit()">
		<rect x="1" y="17" width="18" height="2" />
		<text x="2" y="17">Create!</text>
	</g>
	<script><![CDATA[
var ns = "http://www.w3.org/2000/svg";
var ce = (n) => document.createElementNS(ns, n)

function makeSlider(title, y, min, initialValue, max, accuracy) {
	var e = ce("g")
	document.rootElement.appendChild(e)
	e.setAttribute("style", `transform: translateY(${y + 4.5}px);`)
	// Make the title
	var titleElm = ce("text")
	e.appendChild(titleElm)
	titleElm.setAttribute("x", "0.5")
	titleElm.setAttribute("y", "-0.5")
	titleElm.innerHTML = `<tspan>${title}: </tspan><tspan></tspan>`
	// Make the drawing rects
	var slider = ce("g")
	e.appendChild(slider)
	slider.innerHTML = `<rect x="0" y="0" width="20" height="2" fill="white" />
<rect x="0.5" y="0.75" width="19" height="0.5" rx="0.25" fill="white" stroke-width="0.1" stroke="black" />`
	// Make the circle
	var circle = ce("circle")
	slider.appendChild(circle)
	circle.setAttribute("cy", "1")
	circle.setAttribute("r", "1")
	// Set up the return object
	var data = {
		elm: e,
		amount: initialValue
	}
	// Add the event listeners
	function sliderUpdatePos() {
		var n = (data.amount - min) / (max - min)
		var x = (n * 19) + 0.5
		circle.setAttribute("cx", x)
		titleElm.children[1].innerHTML = data.amount
	}
	function sliderHandler(event) {
		if (event.buttons != 1) return
		var box = slider.children[1].getBoundingClientRect()
		var amount = (event.clientX - box.left) / box.width
		if (amount < 0) amount = 0
		if (amount > 1) amount = 1
		amount = min + (amount * (max - min))
		amount = Math.round(amount * accuracy) / accuracy
		data.amount = amount
		sliderUpdatePos()
	}
	function sliderUp(event) {
		document.rootElement.removeEventListener("mousemove", sliderHandler)
		document.rootElement.removeEventListener("mouseup", sliderUp)
	}
	slider.addEventListener("mousedown", (event) => {
		sliderHandler(event)
		document.rootElement.addEventListener("mousemove", sliderHandler)
		document.rootElement.addEventListener("mouseup", sliderUp)
	})
	// Finish
	sliderUpdatePos()
	return data
}
var speedSlider = makeSlider("Frequency (Hz)", 0, 0.4, 1, 3, 50)
function submit() {
	var frequency = speedSlider.amount
	var filename = "Custom File " + frequency + " Hz"
	var x = new XMLHttpRequest()
	x.open("POST", "/create")
	x.addEventListener("loadend", (e) => location.replace("/set/"+filename+"/"))
	x.send(`${filename}\n${frequency}`)
}
(() => {
	var elms = [...document.querySelectorAll(".slider")]
	for (var i = 0; i < elms.length; i++) {
		elms[i].dataset.amount = "0.5"
		sliderUpdatePos(elms[i])
		elms[i].addEventListener("mousemove", sliderHandler)
		elms[i].addEventListener("mousedown", sliderHandler)
	}
})();
	]]></script>
</svg>